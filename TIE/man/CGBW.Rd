% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estim_functions.R
\name{CGBW}
\alias{CGBW}
\title{Caeiro et al. (2016) Tail Index Estimator}
\usage{
CGBW(X, k, p)
}
\arguments{
\item{X}{A numeric vector containing the data sample.}

\item{k}{An optional integer specifying the number of top-order statistics to use. Defaults to the square root of the sample size.}

\item{p}{An optional numeric parameter controlling the power transformation. If not provided, it is calculated using auxiliary parameters.}
}
\value{
A numeric value representing the estimated tail index.
}
\description{
Computes the tail index estimator from Caeiro et al. (2016), incorporating auxiliary parameters and bias reduction techniques.
}
\details{
This estimator refines the tail index using auxiliary parameters (\(\rho\), \(\beta\), \(\phi\)) and a bias-adjusted formula:
- The auxiliary parameters are calculated as follows:
  - \(\rho\) is computed using the \code{rho} function.
  - \(\beta\) is computed using the \code{beta} function.
  - \(\phi\) is calculated based on the power transformation parameter \( p \) and the Hill estimator \( H \):
    - If \( p \) is not provided, \(\phi\) is computed as:
      \[
      \phi = 1 - \frac{\rho}{2} - 0.5 \sqrt{\rho^2 - 4\rho + 2}.
      \]
      \( \phi \) is constrained to \( [0, \sqrt{2}/2] \), and \( p \) is determined as:
      \[
      p = \phi / H.
      \]
    - If \( p \) is provided, \(\phi = p \cdot H\).
- The tail index is computed as:
  \[
  \text{Tail Index} = \left[ \gamma \cdot \left( 1 - \frac{\beta \cdot (1 - \phi)}{(1 - \rho - \phi)} \cdot \left(\frac{n}{k}\right)^{\rho} \right) \right]^{-1},
  \]
  where \( \gamma \) is calculated using power-transformed order statistics:
  \[
  \gamma = \frac{1 - \frac{1}{\text{mean}(U)}}{p},
  \]
  and \( U = \left( \frac{X_{(n-k+i)}}{X_{(n-k)}} \right)^p \) for \( i = 1, \ldots, k \).

This method improves bias reduction by combining power transformations, auxiliary parameters, and the Hill estimator.
}
\examples{
set.seed(123)
n = 1000
x = (abs(stats::rcauchy(n)))^(2)
CGBW(x)

}
